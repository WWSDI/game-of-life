[{"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/index.js":"1","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/App.js":"2","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Board.jsx":"3","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Control.jsx":"4","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Cell.jsx":"5","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Button.jsx":"6","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/boardUtils.js":"7","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/cellUtils.js":"8","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/uiUtils.js":"9","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/appUtil.js":"10","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Info.jsx":"11","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/demoUtil.js":"12","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Header.jsx":"13"},{"size":167,"mtime":1658118267948,"results":"14","hashOfConfig":"15"},{"size":2136,"mtime":1660254446893,"results":"16","hashOfConfig":"15"},{"size":3187,"mtime":1658353512368,"results":"17","hashOfConfig":"15"},{"size":13049,"mtime":1658353512369,"results":"18","hashOfConfig":"15"},{"size":1369,"mtime":1658217023087,"results":"19","hashOfConfig":"15"},{"size":371,"mtime":1658298317714,"results":"20","hashOfConfig":"15"},{"size":657,"mtime":1658217023088,"results":"21","hashOfConfig":"15"},{"size":1660,"mtime":1658217023088,"results":"22","hashOfConfig":"15"},{"size":740,"mtime":1658217023089,"results":"23","hashOfConfig":"15"},{"size":95,"mtime":1658353512370,"results":"24","hashOfConfig":"15"},{"size":370,"mtime":1660253633125,"results":"25","hashOfConfig":"15"},{"size":2490,"mtime":1658353512370,"results":"26","hashOfConfig":"15"},{"size":493,"mtime":1660254371721,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"e9juq6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/index.js",[],["57","58"],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/App.js",["59","60"],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Board.jsx",["61","62","63"],"import { useEffect, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport styles from \"./board.module.css\";\nimport {\n  getNumofLiveNeighbours,\n  getNextGen,\n  getNeighboursIndices,\n  getValidNeighboursIndices,\n} from \"../utils/cellUtils\";\n\nexport default function Board({\n  board,\n  setBoard,\n  cols,\n  rows,\n  start,\n  setStart,\n  speed,\n  setGeneration,\n  theme,\n  step,\n  setStep,\n  draw,\n  setDraw,\n}) {\n  const handleClick = (e) => {\n    const { value: idx } = e.target.attributes.idx;\n\n    const newValue = !board[idx];\n    const newBoard = [...board];\n    newBoard[idx] = newValue;\n    setBoard(newBoard);\n  };\n\n  const handleDraw = (e) => {\n    const idx = Number(e.target.attributes.idx.value);\n    \n    // wide stroke\n    if (draw && e.ctrlKey) {\n      const newBoard = [...board];\n      newBoard[idx] = true;\n\n      const neighbours = getValidNeighboursIndices(rows, idx, cols);\n      // console.log(neighbours);\n      neighbours.forEach((n) => (newBoard[n] = true));\n      setBoard(newBoard);\n    }\n\n    // thin stroke\n    if (draw && e.altKey && !e.metaKey) {\n      if (board[idx]) return;\n\n      const newBoard = [...board];\n      newBoard[idx] = true;\n      setBoard(newBoard);\n    }\n\n    // erase with normal/wide stroke\n    if (draw && e.metaKey) {\n      const newBoard = [...board];\n      newBoard[idx] = false;\n\n      // hold both ctrl and meta key to apply normal stroke erasing\n      if (!e.altKey) {\n        const neighbours = getValidNeighboursIndices(rows, idx, cols);\n        // console.log(neighbours);\n        neighbours.forEach((n) => (newBoard[n] = false));\n      }\n\n      setBoard(newBoard);\n    }\n  };\n\n  // for stepping\n  //感覺這裡好像很適合寫成custom hook，可以試試看\n  // useRef() is used for saving remaining render count between renders, so that this useEffect hook doesn't over render (it renders twice due to update delay of step state)\n  const savedCount = useRef(0);\n  useEffect(() => {\n    if (step) {\n      savedCount.current += 1;\n    }\n\n    const newBoard = board.map((alive, i) =>\n      getNextGen(alive, getNumofLiveNeighbours(i, cols, board))\n    );\n\n    if (savedCount.current >= 1) {\n      setBoard(newBoard);\n      setGeneration((gen) => gen + 1);\n      savedCount.current -= 1;\n      console.log(\"<Board>: render next gen\");\n    }\n\n    return () => setStep(false);\n  }, [step]);\n\n  // for normal start/stop\n  useEffect(() => {\n    console.log(\"<Board>: start/stop, cols, rows\", cols, rows);\n\n    if (!start) return;\n\n    const newBoard = board.map((alive, i) =>\n      getNextGen(alive, getNumofLiveNeighbours(i, cols, board))\n    );\n\n    const id = setTimeout(() => {\n      if (start) {\n        setBoard(newBoard);\n        setGeneration((gen) => gen + 1);\n        console.log(\"<Board>: ⏯ render next gen\");\n      }\n    }, 1000 - speed);\n\n    return () => clearTimeout(id);\n  }, [start, board]);\n\n  return (\n    <div className={styles.board} id=\"board\" onClick={handleClick}>\n      {board.map((v, i) => {\n        return (\n          <Cell\n            key={i}\n            handleDraw={handleDraw}\n            value={v}\n            idx={i}\n            theme={theme}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Control.jsx",["64","65"],"import Button from \"./Button\";\nimport {\n  getEmptyBd,\n  getInit,\n  getInitRan,\n  getMagneticRandomBd,\n} from \"../utils/boardUtils\";\nimport styles from \"./control.module.css\";\nimport stylesBtn from \"./button.module.css\";\nimport { awaitTimeout } from \"../utils/appUtil\";\nimport {\n  get2VerticalStripes,\n  getCross,\n  getSquare,\n  getVerticalStripe,\n} from \"../utils/demoUtil\";\nimport { useState } from \"react\";\n\nexport default function Control({\n  cols,\n  rows,\n  setColsRows,\n  seed,\n  setSeed,\n  speed,\n  setSpeed,\n  start,\n  setStart,\n  setBoard,\n  generation,\n  setGeneration,\n  setTheme,\n  step,\n  setStep,\n  setDraw,\n  setTooltip,\n  tooltip,\n  setMessageBoard,\n}) {\n  const [demo, setDemo] = useState(\"title\");\n\n  const changeTheme = (event) => {\n    setTheme(event.target.value);\n  };\n\n  const handleStartStop = () => {\n    console.log(\"⭐️ start/stop clicked: current gen:\", generation);\n    setStart(!start);\n  };\n\n  const clickRandom = (seed) => {\n    console.log(\"⭐️ about to use RANDOM BOARD\");\n    if (!start) {\n      console.log(\"⭐️\");\n      setBoard(getInitRan(cols, rows, seed));\n      setGeneration(1);\n      return;\n    }\n\n    setStart(false);\n    // very inelegant way to make it sync\n    setTimeout(() => {\n      setBoard(getInitRan(cols, rows, seed));\n      setGeneration(1);\n    }, 200);\n  };\n\n  const changeRes = (cols, rows, seed = 0) => {\n    if (start) {\n      setStart(false);\n      return;\n    }\n    setTimeout(() => {\n      console.log(\"🥵 inside changeRes: cols, rows\", cols, rows);\n      document.querySelector(\":root\").style.setProperty(\"--cols\", cols);\n      setBoard(getEmptyBd(cols, rows));\n      setGeneration(1);\n    }, 200);\n  };\n\n  const handleClear = () => {\n    if (start) {\n      setStart(false);\n    }\n    setTimeout(() => {\n      setBoard(getEmptyBd(cols, rows));\n      setGeneration(1);\n      setMessageBoard(\"\");\n    }, 400);\n  };\n  const toggleDraw = (e) => {\n    e.currentTarget.classList.toggle(stylesBtn.buttonActivated);\n    setDraw((draw) => !draw);\n  };\n  const toggleTooltip = (e) => {\n    setTooltip((tooltip) => !tooltip);\n    // due to useState is async and lagging, a temp state has to be created (it's a hack)\n    const tooltipState = !tooltip;\n\n    // toggle button activated state\n    e.currentTarget.classList.toggle(stylesBtn.buttonActivated);\n\n    // toggle animation state\n    const allTooltiptext = document.querySelectorAll(\n      `#control > div .${styles.tooltiptext}`\n    );\n    const state = tooltipState ? \"running\" : \"paused\";\n    allTooltiptext.forEach((el) => {\n      el.style.animationPlayState = state;\n    });\n  };\n\n  const handleDemo = () => {\n    const setTheStage = (cols = 80, rows = 40) => {\n      changeRes(cols, rows);\n      setColsRows([cols, rows]);\n      setSpeed(1000);\n    };\n    const cleanup = async (waitTime) => {\n      await awaitTimeout(waitTime);\n      setMessageBoard(\"Demo is over, thank you for watching.\");\n\n      await awaitTimeout(3000);\n      setMessageBoard(\"\");\n    };\n\n    const title = async () => {\n      console.log(\"Demo - title\");\n      setMessageBoard(\n        <div style={{ background: \"yellow\", color: \"red\" }}>\n          <p>⚠️ You have NOT selected a demo to play. </p>\n          <p>Please choose one from the dropdown list.</p>\n        </div>\n      );\n      await awaitTimeout(3000);\n      setMessageBoard(\"\");\n    };\n\n    const dcBlingBling = async (cols = 80, rows = 40) => {\n      setTheStage();\n\n      setMessageBoard(\"Demo is about to start\");\n      await awaitTimeout(2000);\n      const shape = getVerticalStripe(cols, rows, 3);\n      \n      setMessageBoard(\"Ready?\");\n      setBoard(shape);\n\n      await awaitTimeout(2000);\n      setMessageBoard(\"Go!\");\n      setStart(true);\n\n      await awaitTimeout(11000);\n      setMessageBoard(\"I call this one DC bling bling! 😊\");\n\n      cleanup(9000);\n    };\n    const doubleStripe = async (cols = 80, rows = 40) => {\n      setTheStage();\n\n      await awaitTimeout(2000);\n      const shape = get2VerticalStripes(cols, rows, 3);\n      console.log(shape);\n      setBoard(shape);\n\n      await awaitTimeout(2000);\n      setStart(true);\n\n      cleanup(30000)\n    };\n    const starryNight = async (cols = 80, rows = 40) => {\n      setTheStage();\n\n      await awaitTimeout(2000);\n      const shape = getCross(cols, rows, 5);\n      console.log(shape);\n      setBoard(shape);\n\n      await awaitTimeout(2000);\n      setStart(true);\n\n      cleanup(30000);\n    };\n    const snowFlake = async (cols = 80, rows = 50) => {\n      setTheStage(cols, rows);\n\n      await awaitTimeout(2000);\n      setMessageBoard(\"Hmmn, this is gonna be a short one...\");\n      const shape = getSquare(cols, rows, 16);\n      console.log(shape);\n      setBoard(shape);\n\n      await awaitTimeout(2000);\n      setStart(true);\n\n      await awaitTimeout(5000);\n      setMessageBoard(\"This reminds me a little bit of Frozen. What do you think?\");\n\n      cleanup(5000);\n    };\n\n    const demos = {\n      title,\n      dcBlingBling,\n      snowFlake,\n      doubleStripe,\n      starryNight,\n    };\n\n    demos[demo]();\n  };\n\n  return (\n    <div id=\"control\" className={styles.controlContainer}>\n      <div\n        className={`${styles.changeColorTheme} ${styles.container} ${styles.tooltip}`}\n      >\n        <span className={styles.tooltiptext}>\n          Change colour theme of the board\n        </span>\n        <select\n          name=\"changeColorTheme\"\n          onChange={changeTheme}\n          defaultValue=\"title\"\n        >\n          <option value=\"title\" disabled>\n            Change Color Theme\n          </option>\n          <option value=\"dimRainbow\">Dim Rainbow</option>\n          <option value=\"vividRainbow\">Vivid Rainbow</option>\n          <option value=\"matrix\">Matrix</option>\n          <option value=\"mono\">Mono Green</option>\n          <option value=\"finland\">Finland</option>\n          <option value=\"sky\">Sky</option>\n          <option value=\"flame\">Flame</option>\n          <option value=\"cherryblossom\">Cherry Blossom</option>\n        </select>\n      </div>\n\n      <div\n        className={`${styles.changeResolution} ${styles.container} ${styles.tooltip}`}\n      >\n        <div className={styles.tooltiptext}>\n          <p>Change resolution and shape of the board.</p>\n        </div>\n        <select\n          name=\"changeResolution\"\n          disabled={start ? true : false}\n          onChange={(e) => {\n            if (!e.target.value) return;\n            if (start) {\n              setStart(false);\n              return;\n            }\n\n            const [cols, rows] = e.target.value.match(/(\\d{2})/g);\n            setColsRows([+cols, +rows]);\n          }}\n          defaultValue=\"title\"\n        >\n          <option value=\"title\" disabled>\n            Choose a resolution\n          </option>\n          <option value={[30, 30]}>Square (S, 30*30)</option>\n          <option value={[40, 40]}>Square (M, 40*40)</option>\n          <option value={[50, 50]}>Square (L, 50*50)</option>\n          <option value={[50, 30]}>Widescreen (S, 50*30)</option>\n          <option value={[60, 40]}>Widescreen (M, 60*40)</option>\n          <option value={[80, 40]}>Widescreen (L, 80*40)</option>\n        </select>\n        <Button\n          handleClick={() => changeRes(cols, rows)}\n          disabled={start ? true : false}\n        >\n          Change Resolution\n        </Button>\n      </div>\n\n      <div className={`${styles.demo} ${styles.container} ${styles.tooltip}`}>\n        <div className={styles.tooltiptext}>\n          <p>Watch automated demo.</p>\n          <p>You can choose different demo to watch.</p>\n          <p>Sit back and enjoy the mesmerising show!</p>\n        </div>\n        <Button handleClick={() => handleDemo(demo)}>Demo</Button>\n        <div className=\"flexContainer\">\n          <label>\n            <select value={demo} onChange={(e) => setDemo(e.target.value)}>\n              <option value=\"title\" disabled>\n                Choose a demo\n              </option>\n              <option value=\"dcBlingBling\">DC Bling Bling</option>\n              <option value=\"starryNight\">Starry Night</option>\n              <option value=\"snowFlake\">Snow Flake</option>\n              <option value=\"doubleStripe\">Double Stripe</option>\n            </select>\n          </label>\n        </div>\n      </div>\n\n      <div\n        className={`${styles.startStop} ${styles.container} ${styles.tooltip}`}\n      >\n        <div className={styles.tooltiptext}>\n          <p>Play/Pause the game.</p>\n          <p>Use the slider to change the speed.</p>\n        </div>\n        <Button handleClick={handleStartStop}>\n          {start ? \"STOP\" : \"START\"}\n        </Button>\n        <div className=\"flexContainer \">\n          <label>\n            <input\n              type=\"range\"\n              value={speed}\n              min={0}\n              max={1000}\n              step={10}\n              onChange={(e) => {\n                setSpeed(Number(e.target.value));\n              }}\n            />\n          </label>\n          {/* use parabola function to turn speed slider from linear to parabola that is more inline with actual speed changes */}\n          <span>\n            {speed < 200\n              ? (speed ** 2 / 10000 + 1).toFixed(1)\n              : Math.round(speed ** 2 / 10000)}\n          </span>\n        </div>\n      </div>\n\n      <div\n        id=\"step\"\n        className={`${styles.step} ${styles.container} ${styles.tooltip}`}\n        onClick={() => {\n          console.log(\"<Control>: step button clicked\", step);\n          setStep(() => !step);\n          // setStep(true);\n        }}\n      >\n        <div className={styles.tooltiptext}>\n          <p>Manually step into the next generation.</p>\n          <p>\n            It's like playing a movie frame by frame. You can change the board\n            with the drawing feature before stepping into the next generation.\n          </p>\n        </div>\n        <Button disabled={start ? true : false}>Step</Button>\n      </div>\n\n      <div\n        id=\"seedRandomBoard\"\n        className={`${styles.seedRandomBoard} ${styles.container} ${styles.tooltip}`}\n      >\n        <div className={styles.tooltiptext}>\n          <p>Randomise the board.</p>\n          <p>\n            Use Seed slider to control the number of live cells being seeded\n            into the board.\n          </p>\n        </div>\n        <label>\n          Seed Number\n          <input\n            type=\"number\"\n            onChange={(e) => {\n              setSeed(e.target.value);\n            }}\n            value={seed}\n          />\n        </label>\n        <Button handleClick={() => clickRandom(seed)}>Random</Button>\n      </div>\n\n      <div\n        id=\"draw\"\n        className={`${styles.draw} ${styles.container} ${styles.tooltip}`}\n      >\n        <div className={styles.tooltiptext}>\n          <p>\n            Toggle drawing mode. Can be used both when the game is running or\n            paused.\n          </p>\n          <p>---------------------------</p>\n          <p>When in drawing mode: </p>\n          {((isMac) => {\n            const keys = isMac\n              ? [\"⌃ Control\", \"⌘ Command\", \"⌥ Option\"]\n              : [\"Ctrl\", \"Alt\", \"Win/Meta\"];\n            return (\n              <ul style={{ textAlign: \"left\" }}>\n                <li>\n                  <p>\n                    <strong>Draw</strong>: hold{\" \"}\n                    <span style={{ fontWeight: \"bold\", color: \"greenyellow\" }}>\n                      {keys[0]}\n                    </span>{\" \"}\n                    key to draw\n                  </p>\n                </li>\n                <li>\n                  <p>\n                    <strong>Erase</strong>: hold{\" \"}\n                    <span style={{ fontWeight: \"bold\", color: \"greenyellow\" }}>\n                      {keys[1]}\n                    </span>{\" \"}\n                    key\n                  </p>\n                </li>\n                <li>\n                  <p>\n                    <strong>Apply Thinstroke</strong>: hold ALSO{\" \"}\n                    <span style={{ fontWeight: \"bold\", color: \"greenyellow\" }}>\n                      {keys[2]}\n                    </span>{\" \"}\n                    key\n                  </p>\n                </li>\n              </ul>\n            );\n          })(window.navigator.platform.includes(\"Mac\"))}\n        </div>\n        <Button handleClick={toggleDraw}>Draw</Button>\n      </div>\n\n      <div\n        id=\"clearBoard\"\n        className={`${styles.clear} ${styles.container} ${styles.tooltip}`}\n      >\n        <div className={styles.tooltiptext}>\n          <p>Clear the whole board.</p>\n          <p>Use when you want a blank canvas for Drawing.</p>\n        </div>\n        <Button handleClick={handleClear}>Clear</Button>\n      </div>\n\n      <div\n        id=\"tooltip\"\n        className={`${styles.tooltip} ${styles.container} ${styles.tooltip}`}\n        // onPointerOver={startTooltipAnimation}\n      >\n        <div className={styles.tooltiptext}>\n          Enable tooltip. Hover on buttons to see tooltip.\n        </div>\n        <Button handleClick={toggleTooltip}>Tooltip</Button>\n      </div>\n    </div>\n  );\n}\n","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Cell.jsx",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Button.jsx",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/boardUtils.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/cellUtils.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/uiUtils.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/appUtil.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Info.jsx",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/demoUtil.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Header.jsx",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":12},{"ruleId":"70","severity":1,"message":"75","line":7,"column":3,"nodeType":"72","messageId":"73","endLine":7,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":95,"column":6,"nodeType":"78","endLine":95,"endColumn":12,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":116,"column":6,"nodeType":"78","endLine":116,"endColumn":20,"suggestions":"81"},{"ruleId":"70","severity":1,"message":"82","line":4,"column":3,"nodeType":"72","messageId":"73","endLine":4,"endColumn":10},{"ruleId":"70","severity":1,"message":"83","line":6,"column":3,"nodeType":"72","messageId":"73","endLine":6,"endColumn":22},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Info' is defined but never used.","'getNeighboursIndices' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'board', 'cols', 'setBoard', 'setGeneration', and 'setStep'. Either include them or remove the dependency array. If 'setBoard' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["86"],"React Hook useEffect has missing dependencies: 'cols', 'rows', 'setBoard', 'setGeneration', and 'speed'. Either include them or remove the dependency array. If 'setBoard' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["87"],"'getInit' is defined but never used.","'getMagneticRandomBd' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [board, cols, setBoard, setGeneration, setStep, step]",{"range":"92","text":"93"},"Update the dependencies array to be: [start, board, cols, rows, speed, setBoard, setGeneration]",{"range":"94","text":"95"},[2308,2314],"[board, cols, setBoard, setGeneration, setStep, step]",[2816,2830],"[start, board, cols, rows, speed, setBoard, setGeneration]"]