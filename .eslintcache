[{"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/index.js":"1","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/App.js":"2","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Board.jsx":"3","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Setting.jsx":"4","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Control.jsx":"5","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Cell.jsx":"6","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Button.jsx":"7","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/boardUtils.js":"8","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/cellUtils.js":"9","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/uiUtils.js":"10"},{"size":167,"mtime":1658118267948,"results":"11","hashOfConfig":"12"},{"size":2169,"mtime":1658275661851,"results":"13","hashOfConfig":"12"},{"size":3158,"mtime":1658291908707,"results":"14","hashOfConfig":"12"},{"size":127,"mtime":1658118267945,"results":"15","hashOfConfig":"12"},{"size":7539,"mtime":1658281269945,"results":"16","hashOfConfig":"12"},{"size":1369,"mtime":1658217023087,"results":"17","hashOfConfig":"12"},{"size":371,"mtime":1658278448791,"results":"18","hashOfConfig":"12"},{"size":657,"mtime":1658217023088,"results":"19","hashOfConfig":"12"},{"size":1660,"mtime":1658217023088,"results":"20","hashOfConfig":"12"},{"size":740,"mtime":1658217023089,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"e9juq6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/index.js",[],["44","45"],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/App.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Board.jsx",["46","47","48"],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Setting.jsx",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Control.jsx",["49","50"],"import Button from \"./Button\";\nimport {\n  getEmptyBd,\n  getInit,\n  getInitRan,\n  getMagneticRandomBd,\n} from \"../utils/boardUtils\";\nimport styles from \"./control.module.css\";\nimport stylesBtn from \"./button.module.css\";\n\nexport default function Control({\n  cols,\n  rows,\n  setColsRows,\n  // setCols,\n  // setRows,\n  seed,\n  setSeed,\n  speed,\n  setSpeed,\n  start,\n  setStart,\n  setBoard,\n  generation,\n  setGeneration,\n  setTheme,\n  step,\n  setStep,\n  setDraw,\n  setTooltip,\n  tooltip,\n}) {\n  const changeTheme = (event) => {\n    setTheme(event.target.value);\n  };\n\n  const handleStartStop = () => {\n    console.log(\"⭐️ start/stop clicked: current gen:\", generation);\n    setStart(!start);\n  };\n\n  const clickRandom = (seed) => {\n    console.log(\"⭐️ about to use RANDOM BOARD\");\n    if (!start) {\n      console.log(\"⭐️\");\n      setBoard(getInitRan(cols, rows, seed));\n      setGeneration(1);\n      return;\n    }\n\n    setStart(false);\n    // very inelegant way to make it sync\n    setTimeout(() => {\n      setBoard(getInitRan(cols, rows, seed));\n      setGeneration(1);\n    }, 200);\n  };\n\n  const changeRes = () => {\n    if (start) {\n      setStart(false);\n      return;\n    }\n    setTimeout(() => {\n      document.querySelector(\":root\").style.setProperty(\"--cols\", cols);\n      setBoard(getInitRan(cols, rows, seed));\n      setGeneration(1);\n    }, 200);\n  };\n\n  const handleClear = () => {\n    if (start) {\n      setStart(false);\n    }\n    setTimeout(() => {\n      setBoard(getEmptyBd(cols, rows));\n      setGeneration(1);\n    }, 200);\n  };\n  const toggleDraw = (e) => {\n    e.currentTarget.classList.toggle(stylesBtn.buttonActivated);\n    setDraw((draw) => !draw);\n  };\n  const toggleTooltip = (e) => {\n    setTooltip((tooltip) => !tooltip);\n    // due to useState is async and lagging, a temp state has to be created (it's a hack) \n    const tooltipState = !tooltip;\n\n    // toggle button activated state\n    e.currentTarget.classList.toggle(stylesBtn.buttonActivated);\n\n    // toggle animation state\n    const allTooltiptext = document.querySelectorAll(\n      `#control > div .${styles.tooltiptext}`\n    );\n    const state = tooltipState ? \"running\" : \"paused\"\n    allTooltiptext.forEach((el) => {\n      el.style.animationPlayState = state;\n    });\n  };\n\n  return (\n    <div id=\"control\" className={styles.controlContainer}>\n      <div\n        className={`${styles.changeColorTheme} ${styles.container} ${styles.tooltip}`}\n      >\n        <span class={styles.tooltiptext}>Change colour theme of the board</span>\n        <select name=\"changeColorTheme\" onChange={changeTheme}>\n          <option selected disabled>\n            Color Theme\n          </option>\n          <option value=\"dimRainbow\">Dim Rainbow</option>\n          <option value=\"vividRainbow\">Vivid Rainbow</option>\n          <option value=\"matrix\">Matrix</option>\n          <option value=\"mono\">Mono Green</option>\n          <option value=\"finland\">Finland</option>\n          <option value=\"sky\">Sky</option>\n          <option value=\"flame\">Flame</option>\n          <option value=\"cherryblossom\">Cherry Blossom</option>\n        </select>\n      </div>\n\n      <div\n        className={`${styles.changeResolution} ${styles.container} ${styles.tooltip}`}\n      >\n        <span class={styles.tooltiptext}>\n          Change resolution and shape of the board\n        </span>\n        <select\n          name=\"changeResolution\"\n          disabled={start ? true : false}\n          onChange={(e) => {\n            if (!e.target.value) return;\n            if (start) {\n              setStart(false);\n              return;\n            }\n\n            const [cols, rows] = e.target.value.match(/(\\d{2})/g);\n            setColsRows([+cols, +rows]);\n          }}\n        >\n          <option selected disabled>\n            Choose a resolution\n          </option>\n          <option value={[30, 30]}>Square (S, 30*30)</option>\n          <option value={[40, 40]}>Square (M, 40*40)</option>\n          <option value={[50, 50]}>Square (L, 50*50)</option>\n          <option value={[50, 30]}>Widescreen (S, 50*30)</option>\n          <option value={[60, 40]}>Widescreen (M, 60*40)</option>\n          <option value={[80, 40]}>Widescreen (L, 80*40)</option>\n        </select>\n        <Button handleClick={changeRes} disabled={start ? true : false}>\n          Change Resolution\n        </Button>\n      </div>\n\n      <div\n        className={`${styles.startStop} ${styles.container} ${styles.tooltip}`}\n      >\n        <span class={styles.tooltiptext}>\n          Play/Pause the game. Use the slider to change the speed.\n        </span>\n        <Button handleClick={handleStartStop}>\n          {start ? \"STOP\" : \"START\"}\n        </Button>\n        <div className=\"flexContainer \">\n          <label>\n            <input\n              type=\"range\"\n              value={speed}\n              min={0}\n              max={1000}\n              step={10}\n              onChange={(e) => {\n                setSpeed(Number(e.target.value));\n              }}\n            />\n          </label>\n          {/* use parabola function to turn speed slider from linear to parabola that is more inline with actual speed changes */}\n          <span>\n            {speed < 200\n              ? (speed ** 2 / 10000 + 1).toFixed(1)\n              : Math.round(speed ** 2 / 10000)}\n          </span>\n        </div>\n      </div>\n\n      <div\n        id=\"step\"\n        className={`${styles.step} ${styles.container} ${styles.tooltip}`}\n        onClick={() => {\n          console.log(\"<Control>: step button clicked\", step);\n          setStep(() => !step);\n          // setStep(true);\n        }}\n      >\n        <span class={styles.tooltiptext}>\n          Manually step into the next generation.\n        </span>\n        <Button disabled={start ? true : false}>Step</Button>\n      </div>\n\n      <div\n        id=\"seedRandomBoard\"\n        className={`${styles.seedRandomBoard} ${styles.container} ${styles.tooltip}`}\n      >\n        <span class={styles.tooltiptext}>\n          Randomise the board. Use Seed slide to control the number of live\n          cells being seeded.\n        </span>\n        <label>\n          Seed Number\n          <input\n            type=\"number\"\n            onChange={(e) => {\n              setSeed(e.target.value);\n            }}\n            value={seed}\n          />\n        </label>\n        <Button handleClick={() => clickRandom(seed)}>Random</Button>\n      </div>\n\n      <div\n        id=\"draw\"\n        className={`${styles.draw} ${styles.container} ${styles.tooltip}`}\n      >\n        <div className={styles.tooltiptext}>\n          Enable drawing mode. Can be used both when the game is running or\n          paused. When on: hold <em>Alt</em> key to draw with widestroke,{\" \"}\n          <em>Ctrl</em> for thinstroke;\n        </div>\n        <Button handleClick={toggleDraw}>Draw</Button>\n      </div>\n\n      <div\n        id=\"clearBoard\"\n        className={`${styles.clear} ${styles.container} ${styles.tooltip}`}\n      >\n        <span className={styles.tooltiptext}>\n          Clear the whole board. Use if you want a blank canvas for Drawing.\n        </span>\n        <Button handleClick={handleClear}>Clear</Button>\n      </div>\n\n      <div\n        id=\"tooltip\"\n        className={`${styles.tooltip} ${styles.container} ${styles.tooltip}`}\n        // onPointerOver={startTooltipAnimation}\n      >\n        <div className={styles.tooltiptext}>\n          Enable tooltip. Hover on buttons to see tooltip.\n        </div>\n        <Button handleClick={toggleTooltip}>Tooltip</Button>\n      </div>\n    </div>\n  );\n}\n","/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Cell.jsx",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/components/Button.jsx",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/boardUtils.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/cellUtils.js",[],"/Users/ShawnsuDI/Workspace/Shawn's Projects/game-of-life/src/utils/uiUtils.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":7,"column":3,"nodeType":"57","messageId":"58","endLine":7,"endColumn":23},{"ruleId":"59","severity":1,"message":"60","line":95,"column":6,"nodeType":"61","endLine":95,"endColumn":12,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":116,"column":6,"nodeType":"61","endLine":116,"endColumn":20,"suggestions":"64"},{"ruleId":"55","severity":1,"message":"65","line":4,"column":3,"nodeType":"57","messageId":"58","endLine":4,"endColumn":10},{"ruleId":"55","severity":1,"message":"66","line":6,"column":3,"nodeType":"57","messageId":"58","endLine":6,"endColumn":22},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'getNeighboursIndices' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'board', 'cols', 'setBoard', 'setGeneration', and 'setStep'. Either include them or remove the dependency array. If 'setBoard' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["69"],"React Hook useEffect has missing dependencies: 'cols', 'setBoard', 'setGeneration', and 'speed'. Either include them or remove the dependency array. If 'setBoard' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["70"],"'getInit' is defined but never used.","'getMagneticRandomBd' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [board, cols, setBoard, setGeneration, setStep, step]",{"range":"75","text":"76"},"Update the dependencies array to be: [start, board, speed, cols, setBoard, setGeneration]",{"range":"77","text":"78"},[2308,2314],"[board, cols, setBoard, setGeneration, setStep, step]",[2789,2803],"[start, board, speed, cols, setBoard, setGeneration]"]